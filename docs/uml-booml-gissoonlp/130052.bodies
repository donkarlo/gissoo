class TextFileCorpus
!!!131204.java!!!	TextFileCorpus(inout accessType : KB_AV_ACCESS_TYPE, in accessDetail : String)
        super(accessType, accessDetail);
!!!131332.java!!!	getString() : String
        try {
            BufferedReader reader = new BufferedReader(new FileReader(this.accessDetail));
            String line = null;
            StringBuilder stringBuilder = new StringBuilder();
            String ls = System.getProperty("line.separator");

            while ((line = reader.readLine()) != null) {
                stringBuilder.append(line);
                stringBuilder.append(ls);
            }
            reader.close();
            return stringBuilder.toString();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        return null;
!!!131460.java!!!	getRandomSentences(in sampleSize : int) : ArrayList<String>
        ArrayList<String> generatedSentences = new ArrayList<String>();
        try {
            File file = new File(this.accessDetail);
            int numOfCorpusSentences = this.getNumOfSentences();
            int[] randomSentenceIndexesInTheCorpus = new int[sampleSize];
            randomSentenceIndexesInTheCorpus = this.uniqueRandInt(sampleSize, numOfCorpusSentences);
            Scanner scanner = new Scanner(file);
            Pattern p = Pattern.compile("[\\.\\!\\?\\]]");
            scanner.useDelimiter(p);

            int corpusSentenceCounter = 0;
            while (scanner.hasNext()) {
                String newSentence = scanner.next().trim();
                if (this.intContains(randomSentenceIndexesInTheCorpus, corpusSentenceCounter)) {
                    generatedSentences.add(newSentence);
                    if (generatedSentences.size() >= sampleSize) {
                        break;
                    }
                }
                corpusSentenceCounter++;
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(TextFileCorpus.class.getName()).log(Level.SEVERE, null, ex);
        }

        return generatedSentences;
!!!131588.java!!!	getRandomSentencesContainingWords(inout inputWords : ArrayList<String>) : ArrayList<String>
        ArrayList<String> selectedSentences = new ArrayList<String>();

        int stepSentenceSampleSize = inputWords.size();
        int sentenceSizeOfCorpus = this.getNumOfSentences();
        ArrayList<String> foundedWords = new ArrayList<>();
        do {
            //Prevent to seach in more than avalaible sentences in the corpus
            ArrayList<String> newSampleSentences = this.getRandomSentences(stepSentenceSampleSize);
            for (String sampleSentence : newSampleSentences) {
                for (String inputWord : inputWords) {
                    if (sampleSentence.toLowerCase().matches(".*\\b" + inputWord.toLowerCase() + "\\b.*")) {
                        if (!foundedWords.contains(inputWord)) {
                            foundedWords.add(inputWord);
                            selectedSentences.add(sampleSentence);
                            break;
                        }
                    }
                }
                if (foundedWords.size() >= inputWords.size()) {
                    break;
                }
            }
            //little by little make the sample size bigger
            stepSentenceSampleSize += stepSentenceSampleSize;
        } while ((foundedWords.size() < inputWords.size()) && (stepSentenceSampleSize < sentenceSizeOfCorpus));
        return selectedSentences;
!!!131716.java!!!	getAllSentencesContainingWords(inout words : ArrayList<String>) : ArrayList<String>
        int countWords = words.size();
        ArrayList<String> selectedSentences = new ArrayList<String>();

        int sentenceSizeOfCorpus = this.getNumOfSentences();
        //Prevent to seach in more than avalaible sentences in the corpus
        ArrayList<String> newSentences = this.getRandomSentences(500000);// 500000 takes 16 minutes
        for (String sentence : newSentences) {
            for (String word : words) {
                if (sentence.toLowerCase().matches(".*\\b" + word.toLowerCase() + "\\b.*")) {
                    selectedSentences.add(sentence);
                }
            }
        }
        return selectedSentences;
!!!131844.java!!!	getSimilarSentences() : ArrayList<String>
        return null;
!!!131972.java!!!	getNumOfSentences() : int
        int sentenceCount = 0;
        try {
            BufferedReader reader = new BufferedReader(new FileReader(this.accessDetail));
            String line;
            String delimiters = "?!.";

            while ((line = reader.readLine()) != null) { // Continue reading until end of file is reached
                for (int i = 0; i < line.length(); i++) {
                    if (delimiters.indexOf(line.charAt(i)) != -1) { // If the delimiters string contains the character
                        sentenceCount++;
                    }
                }
            }
            reader.close();
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        return sentenceCount;
!!!132100.java!!!	uniqueRandInt(in numberOfRandomIntegers : int, in upperBound : int) : int
        int[] its = new int[numberOfRandomIntegers];
        Random r = new Random();
        int counter = 0;
        while (counter < numberOfRandomIntegers) {
            int newRandomCandidate = r.nextInt(upperBound) + 1;
            if (!this.intContains(its, newRandomCandidate)) {
                its[counter] = newRandomCandidate;
                counter++;
            }
        }
        return its;
!!!132228.java!!!	intContains(inout ints : int [[]], in target : int) : boolean
        boolean contains = false;
        if (ints.length > 0) {
            for (int cont : ints) {
                if (cont == target) {
                    contains = true;
                    break;
                }
            }
        }
        return contains;
